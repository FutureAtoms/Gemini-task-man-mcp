# Cursor AI Workflow Rules for Gemini Task Manager

This document outlines how to interact with the Gemini Task Manager tool using its command-line interface (`task-manager`). The tool helps manage development tasks stored in a `tasks.json` file.

## Core Concepts

*   **tasks.json:** The central file storing all tasks, subtasks, their details (status, priority, description), and dependencies.
*   **Task IDs:** Unique numerical identifiers for main tasks (e.g., `1`, `2`).
*   **Subtask IDs:** Identifiers for subtasks, formatted as `parentTaskId.subtaskIndex` (e.g., `1.1`, `1.2`).
*   **Statuses:** Common statuses include `todo`, `inprogress`, `done`, `blocked`.
*   **Priorities:** `high`, `medium`, `low`.

## AI Interaction Guidelines

Your primary goal when interacting with this task manager is to drive the project forward by completing tasks sequentially based on dependencies and priorities.

1.  **Determine the Next Task:** Always start by checking what needs to be done next using `task-manager next`. This command considers dependencies and priorities.
2.  **Understand the Task:** Analyze the output of `task-manager next` (or `task-manager list` for broader context) to understand the requirements of the current task.
3.  **Break Down Complex Tasks:** If a task seems too large or complex, use `task-manager expand <task_id>` to break it down into subtasks *before* starting implementation. Review the generated subtasks.
4.  **Implement:** Perform the coding or other actions required to complete the current task or subtask.
5.  **Update Status Regularly:** Mark tasks as `inprogress` when you start working on them (`task-manager status <id> inprogress`). Mark tasks/subtasks as `done` immediately upon completion (`task-manager status <id> done`). If blocked, mark as `blocked` (`task-manager status <id> blocked`).
6.  **Handle Changes:** If implementation choices require changes to future tasks, use `task-manager revise --from <next_task_id> --prompt "<reason_for_change>"` to update the plan.
7.  **Repeat:** After completing a task (or subtask), immediately run `task-manager next` again to identify the next piece of work.
8.  **Communicate:** Inform the user about the task you are working on, when you complete it, and what you plan to do next based on the task manager.

## Available Commands

Always execute these commands from the root of the project where `tasks.json` is located.

### Initialization

*   **Command:** `task-manager init`
*   **Purpose:** Initializes the project. Creates `tasks.json` if it doesn't exist and the `.cursor/rules` directory.
*   **When to use:** Only needed once at the very beginning of a project setup.

### Adding Tasks & Subtasks

*   **Command:** `task-manager add --title "<task_title>" [--description "<desc>"] [--priority <prio>] [--depends-on <id1,id2>]`
*   **Purpose:** Adds a new main task.
*   **Arguments:**
    *   `--title` / `-t`: **Required.** The title of the task.
    *   `--description` / `-d`: *Optional.* A description for the task.
    *   `--priority` / `-p`: *Optional.* Priority (`high`, `medium`, `low`). Defaults to `medium`.
    *   `--depends-on`: *Optional.* Comma-separated list of task IDs this task depends on.
*   **Example:** `task-manager add -t "Implement user login" -d "Setup JWT auth" -p high`

*   **Command:** `task-manager add-subtask <parent_task_id> --title "<subtask_title>"`
*   **Purpose:** Adds a subtask to an existing main task.
*   **Arguments:**
    *   `<parent_task_id>`: **Required.** The ID of the parent task.
    *   `--title` / `-t`: **Required.** The title of the subtask.
*   **Example:** `task-manager add-subtask 1 -t "Create login form UI"`

### Viewing Tasks

*   **Command:** `task-manager list [--status <status>]`
*   **Purpose:** Lists tasks. By default, lists all tasks.
*   **Arguments:**
    *   `--status` / `-s`: *Optional.* Filter tasks by status (e.g., `todo`, `inprogress`, `done`).
*   **Example:** `task-manager list -s todo`

*   **Command:** `task-manager next`
*   **Purpose:** Determines and displays the next actionable task based on dependencies (must be `done`) and priority (highest first, then lowest ID).
*   **Example:** `task-manager next`

### Updating Tasks

*   **Command:** `task-manager status <task_or_subtask_id> <new_status>`
*   **Purpose:** Updates the status of a specific task or subtask.
*   **Arguments:**
    *   `<task_or_subtask_id>`: **Required.** The ID (e.g., `2` or `2.1`).
    *   `<new_status>`: **Required.** The new status (e.g., `inprogress`, `done`).
*   **Example:** `task-manager status 1.1 done`

*   **Command:** `task-manager update <task_or_subtask_id> [--title "..."] [--description "..."] [--priority <...>]`
*   **Purpose:** Updates the details (title, description, priority) of a task or subtask. Note: Description and priority currently only apply effectively to main tasks.
*   **Arguments:**
    *   `<task_or_subtask_id>`: **Required.** The ID (e.g., `3` or `1.2`).
    *   `--title` / `-t`: *Optional.* New title.
    *   `--description` / `-d`: *Optional.* New description (for main tasks).
    *   `--priority` / `-p`: *Optional.* New priority (for main tasks).
*   **Example:** `task-manager update 3 -p low --title "Refactor legacy code"`

### Removing Tasks

*   **Command:** `task-manager remove <task_or_subtask_id>` (or `task-manager rm <id>`)
*   **Purpose:** Deletes a task or subtask. **Use with caution, no confirmation prompt.**
*   **Arguments:**
    *   `<task_or_subtask_id>`: **Required.** The ID to remove.
*   **Example:** `task-manager rm 2.1`

### Generating Files

*   **Command:** `task-manager generate`
*   **Purpose:** Creates individual Markdown files (`task_XXX.md`) for each task in the `tasks/` directory.
*   **Example:** `task-manager generate`

### PRD Parsing (Using Gemini API)

*   **Command:** `task-manager parse-prd <path_to_prd_file>`
*   **Purpose:** Reads a Product Requirements Document (text file), sends it to the Gemini API (requires a `GEMINI_API_KEY` configured in a `.env` file), parses the response, and adds the generated tasks to `tasks.json`.
*   **Arguments:**
    *   `<path_to_prd_file>`: **Required.** The path to the PRD file.
*   **Example:** `task-manager parse-prd ./docs/requirements.txt`

### Expanding Tasks (AI)

*   **Command:** `task-manager expand <task_id>`
*   **Purpose:** Uses the Gemini API to break down the specified task into subtasks. **This will overwrite any existing subtasks for that task.**
*   **Arguments:**
    *   `<task_id>`: **Required.** The ID of the main task to expand.
*   **Example:** `task-manager expand 3`

### Revising Tasks (AI)

*   **Command:** `task-manager revise --from <task_id> --prompt "<change_description>"`
*   **Purpose:** Uses the Gemini API to revise tasks starting from `<task_id>` based on the provided prompt. It considers tasks before `<task_id>` as context (completed/in-progress) and sends the tasks from `<task_id>` onwards to be revised. The returned list replaces the original future tasks.
*   **Arguments:**
    *   `--from <task_id>`: **Required.** The ID of the task from which revisions should begin.
    *   `--prompt` / `-p`: **Required.** A description of the change, new requirement, or reason for revision.
*   **Example:** `task-manager revise --from 5 -p "We decided to switch from REST API to GraphQL for data fetching."`

## Enhanced Workflow Example (AI Driven)

This demonstrates how you, the AI, should use the tool:

1.  **User:** "Let's start working on the project. I have the PRD at `docs/prd.txt`."
2.  **AI:** "Okay, I will initialize the task manager and parse the PRD."
    *   *Executes:* `task-manager init` (if needed)
    *   *Executes:* `task-manager parse-prd docs/prd.txt`
3.  **AI:** "I have parsed the PRD and generated the initial tasks. Let me find the first task to work on."
    *   *Executes:* `task-manager next`
4.  **AI:** (Analyzes output of `next`, e.g., Task 1: Create Game Board)
    "The next task is #1: Create Game Board. I will start working on the HTML structure for the board."
    *   *Executes:* `task-manager status 1 inprogress`
5.  **AI:** (Writes HTML code for the 3x3 grid)
6.  **AI:** "I have created the basic HTML structure for the game board."
    *   *Executes:* `task-manager status 1 done`
7.  **AI:** "Now I'll check for the next task."
    *   *Executes:* `task-manager next`
8.  **AI:** (Analyzes output, e.g., Task 2: Implement Turn Handling)
    "The next task is #2: Implement Turn Handling. This seems complex, I recommend expanding it first."
    *   *Executes:* `task-manager expand 2`
9.  **AI:** "I have broken down Task 2 into subtasks. Let's review them."
    *   *Executes:* `task-manager list` (or reads `tasks.json`)
10. **AI:** "Okay, the first subtask is 2.1: 'Initialize player variable'. I will implement that now."
    *   *Executes:* `task-manager status 2 inprogress` (Mark parent task)
    *   *Executes:* `task-manager status 2.1 inprogress`
11. **AI:** (Writes Javascript code for player variable)
12. **AI:** "Subtask 2.1 is complete."
    *   *Executes:* `task-manager status 2.1 done`
13. **AI:** "I will proceed with the next subtask for Task 2..."
    *   (Continues cycle: implement subtask, `task-manager status <subtask_id> done`) ...
14. **AI:** "All subtasks for Task 2 are complete."
    *   *Executes:* `task-manager status 2 done`
15. **AI:** "Checking for the next task..."
    *   *Executes:* `task-manager next`
    *   (Continues until all tasks are done)
